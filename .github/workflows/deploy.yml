name: Deploy to Render

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Test Job
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Type Check
        run: npm run typecheck
        continue-on-error: true
        
      - name: Run Linter
        run: npm run lint
        continue-on-error: true
        
      - name: Run Tests
        run: npm run test:ci
        env:
          CI: true
          
      - name: Generate Coverage Report
        if: github.event_name == 'pull_request'
        run: npm run test:coverage
        
      - name: Upload Coverage to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Next.js Application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next
            public
            package.json
            package-lock.json
            next.config.js

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Docker Build Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: voice-description-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker Image
        run: |
          docker run -d -p 3000:3000 --name test-container voice-description-api:test
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          docker stop test-container

  # Deploy to Render (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}'
            
      - name: Wait for Deployment
        run: sleep 60
        
      - name: Health Check
        run: |
          MAX_ATTEMPTS=10
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -f https://voice-description-api.onrender.com/api/health; then
              echo "Health check passed!"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT failed, waiting..."
            sleep 30
          done
          echo "Health check failed after $MAX_ATTEMPTS attempts"
          exit 1
          
      - name: Notify Deployment Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Deployment to production successful! https://voice-description-api.onrender.com'
            })

  # Deploy Preview (Pull Requests)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Create Preview Deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Create preview deployment for PR
          echo "Creating preview deployment for PR #${{ github.event.pull_request.number }}"
          
      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://voice-description-api-pr-${prNumber}.onrender.com`;
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment is ready!\n\nPreview URL: ${previewUrl}\n\nThis preview will be automatically destroyed when the PR is closed.`
            })

  # Performance Test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://voice-description-api.onrender.com
            https://voice-description-api.onrender.com/docs
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Performance Metrics Check
        run: |
          echo "Checking performance metrics..."
          # Add performance threshold checks here