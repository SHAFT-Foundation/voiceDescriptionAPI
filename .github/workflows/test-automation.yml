# GitHub Actions workflow for automated testing
# Runs comprehensive test suite on all pull requests and pushes to main

name: Automated Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1
  
jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
        
    - name: Upload unit test coverage
      uses: actions/upload-artifact@v3
      with:
        name: unit-coverage-${{ matrix.node-version }}
        path: coverage/
        
  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,rekognition,bedrock,polly,cloudwatch
          DEFAULT_REGION: us-east-1
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Setup test environment
      run: |
        echo "Setting up test S3 buckets..."
        aws --endpoint-url=http://localhost:4566 s3 mb s3://test-input-bucket
        aws --endpoint-url=http://localhost:4566 s3 mb s3://test-output-bucket
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true
        AWS_ENDPOINT: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: test-results/
        
  # Performance Tests Job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      timeout-minutes: 30
      
    - name: Generate performance report
      run: |
        node scripts/generate-performance-report.js
        
    - name: Upload performance metrics
      uses: actions/upload-artifact@v3
      with:
        name: performance-metrics
        path: performance-report/
        
    - name: Check performance thresholds
      run: |
        node scripts/check-performance-thresholds.js
        
  # Accessibility Tests Job
  accessibility-tests:
    name: Accessibility & Quality Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run accessibility tests
      run: npm run test:accessibility
      
    - name: Generate accessibility report
      run: |
        node scripts/generate-accessibility-report.js
        
    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: accessibility-report/
        
    - name: Check WCAG compliance
      run: |
        node scripts/check-wcag-compliance.js
        
  # Coverage Report Job
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        path: coverage-artifacts/
        
    - name: Merge coverage reports
      run: |
        npx nyc merge coverage-artifacts coverage/merged.json
        npx nyc report -t coverage --report-dir coverage-final --reporter=lcov --reporter=text --reporter=html
        
    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-final/lcov.info
        flags: unittests,integration
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Generate coverage badge
      run: |
        npm run coverage:badge
        
    - name: Check coverage thresholds
      run: |
        npx nyc check-coverage --lines 90 --functions 90 --branches 90 --statements 90
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage-final/coverage-summary.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Test Coverage Report\n\`\`\`\n${coverage}\n\`\`\``
          });
          
  # Security Scan Job
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
        
  # Lint and Type Check Job
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript type checking
      run: npm run typecheck
      
    - name: Check code formatting
      run: npx prettier --check "src/**/*.{js,jsx,ts,tsx}"
      
  # E2E Tests Job (Optional - runs on schedule)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[e2e]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: |
        npm run build
        npm run start &
        npx wait-on http://localhost:3000
      env:
        NODE_ENV: test
        
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test videos
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-videos
        path: cypress/videos/
        
  # Final Status Check
  test-status:
    name: Test Suite Status
    runs-on: ubuntu-latest
    needs: [
      unit-tests,
      integration-tests,
      performance-tests,
      accessibility-tests,
      coverage-report,
      security-scan,
      code-quality
    ]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.coverage-report.result }}" != "success" ]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        echo "All critical tests passed!"
        
    - name: Notify Slack
      if: failure() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Test suite failed on main branch!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
# Matrix Testing Strategy:
# - Node versions: 18.x, 20.x
# - OS: ubuntu-latest (can extend to windows-latest, macos-latest)
# - Test types: unit, integration, performance, accessibility, e2e